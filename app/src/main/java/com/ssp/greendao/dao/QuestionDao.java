package com.ssp.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ssp.greendao.dao.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Question".
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "Question";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, String.class, "index", false, "INDEX");
        public final static Property Record_id = new Property(2, String.class, "record_id", false, "RECORD_ID");
        public final static Property Question_id = new Property(3, String.class, "question_id", false, "QUESTION_ID");
        public final static Property Question_text = new Property(4, String.class, "question_text", false, "QUESTION_TEXT");
        public final static Property Question_type = new Property(5, String.class, "question_type", false, "QUESTION_TYPE");
        public final static Property Question_score = new Property(6, String.class, "question_score", false, "QUESTION_SCORE");
        public final static Property IsCheck = new Property(7, Boolean.class, "isCheck", false, "IS_CHECK");
        public final static Property IsCorrect = new Property(8, Boolean.class, "isCorrect", false, "IS_CORRECT");
        public final static Property Analysis = new Property(9, String.class, "analysis", false, "ANALYSIS");
    };


    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Question\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INDEX\" TEXT," + // 1: index
                "\"RECORD_ID\" TEXT," + // 2: record_id
                "\"QUESTION_ID\" TEXT," + // 3: question_id
                "\"QUESTION_TEXT\" TEXT," + // 4: question_text
                "\"QUESTION_TYPE\" TEXT," + // 5: question_type
                "\"QUESTION_SCORE\" TEXT," + // 6: question_score
                "\"IS_CHECK\" INTEGER," + // 7: isCheck
                "\"IS_CORRECT\" INTEGER," + // 8: isCorrect
                "\"ANALYSIS\" TEXT);"); // 9: analysis
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Question\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String index = entity.getIndex();
        if (index != null) {
            stmt.bindString(2, index);
        }
 
        String record_id = entity.getRecord_id();
        if (record_id != null) {
            stmt.bindString(3, record_id);
        }
 
        String question_id = entity.getQuestion_id();
        if (question_id != null) {
            stmt.bindString(4, question_id);
        }
 
        String question_text = entity.getQuestion_text();
        if (question_text != null) {
            stmt.bindString(5, question_text);
        }
 
        String question_type = entity.getQuestion_type();
        if (question_type != null) {
            stmt.bindString(6, question_type);
        }
 
        String question_score = entity.getQuestion_score();
        if (question_score != null) {
            stmt.bindString(7, question_score);
        }
 
        Boolean isCheck = entity.getIsCheck();
        if (isCheck != null) {
            stmt.bindLong(8, isCheck ? 1L: 0L);
        }
 
        Boolean isCorrect = entity.getIsCorrect();
        if (isCorrect != null) {
            stmt.bindLong(9, isCorrect ? 1L: 0L);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(10, analysis);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // index
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // record_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // question_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // question_text
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // question_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // question_score
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isCheck
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isCorrect
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // analysis
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRecord_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQuestion_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuestion_text(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuestion_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQuestion_score(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsCheck(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsCorrect(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setAnalysis(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

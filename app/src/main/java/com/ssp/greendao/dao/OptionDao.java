package com.ssp.greendao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.ssp.greendao.dao.Option;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Option".
*/
public class OptionDao extends AbstractDao<Option, Long> {

    public static final String TABLENAME = "Option";

    /**
     * Properties of entity Option.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, String.class, "index", false, "INDEX");
        public final static Property Option_id = new Property(2, String.class, "option_id", false, "OPTION_ID");
        public final static Property Option_text = new Property(3, String.class, "option_text", false, "OPTION_TEXT");
        public final static Property Question_id = new Property(4, Long.class, "question_id", false, "QUESTION_ID");
    };

    private DaoSession daoSession;

    private Query<Option> option_OptionsQuery;

    public OptionDao(DaoConfig config) {
        super(config);
    }
    
    public OptionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Option\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INDEX\" TEXT," + // 1: index
                "\"OPTION_ID\" TEXT," + // 2: option_id
                "\"OPTION_TEXT\" TEXT," + // 3: option_text
                "\"QUESTION_ID\" INTEGER);"); // 4: question_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Option\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Option entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String index = entity.getIndex();
        if (index != null) {
            stmt.bindString(2, index);
        }
 
        String option_id = entity.getOption_id();
        if (option_id != null) {
            stmt.bindString(3, option_id);
        }
 
        String option_text = entity.getOption_text();
        if (option_text != null) {
            stmt.bindString(4, option_text);
        }
 
        Long question_id = entity.getQuestion_id();
        if (question_id != null) {
            stmt.bindLong(5, question_id);
        }
    }

    @Override
    protected void attachEntity(Option entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Option readEntity(Cursor cursor, int offset) {
        Option entity = new Option( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // index
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // option_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // option_text
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // question_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Option entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOption_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOption_text(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuestion_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Option entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Option entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "options" to-many relationship of Option. */
    public List<Option> _queryOption_Options(Long question_id) {
        synchronized (this) {
            if (option_OptionsQuery == null) {
                QueryBuilder<Option> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Question_id.eq(null));
                option_OptionsQuery = queryBuilder.build();
            }
        }
        Query<Option> query = option_OptionsQuery.forCurrentThread();
        query.setParameter(0, question_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getQuestionDao().getAllColumns());
            builder.append(" FROM Option T");
            builder.append(" LEFT JOIN Question T0 ON T.\"QUESTION_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Option loadCurrentDeep(Cursor cursor, boolean lock) {
        Option entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Question question = loadCurrentOther(daoSession.getQuestionDao(), cursor, offset);
        entity.setQuestion(question);

        return entity;    
    }

    public Option loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Option> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Option> list = new ArrayList<Option>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Option> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Option> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
